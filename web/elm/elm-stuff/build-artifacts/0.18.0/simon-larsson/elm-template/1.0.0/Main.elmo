var _simon_larsson$elm_template$Main$stateSubscriptions = function (state) {
	var _p0 = state;
	switch (_p0.ctor) {
		case 'Blank':
			return _elm_lang$core$Platform_Sub$none;
		case 'NotFound':
			return _elm_lang$core$Platform_Sub$none;
		case 'Lobby':
			return _elm_lang$core$Platform_Sub$none;
		default:
			return _elm_lang$core$Platform_Sub$none;
	}
};
var _simon_larsson$elm_template$Main$subscriptions = function (model) {
	return _elm_lang$core$Platform_Sub$batch(
		{
			ctor: '::',
			_0: _simon_larsson$elm_template$Main$stateSubscriptions(model.state),
			_1: {ctor: '[]'}
		});
};
var _simon_larsson$elm_template$Main$Model = F2(
	function (a, b) {
		return {session: a, state: b};
	});
var _simon_larsson$elm_template$Main$Lobby = function (a) {
	return {ctor: 'Lobby', _0: a};
};
var _simon_larsson$elm_template$Main$Home = function (a) {
	return {ctor: 'Home', _0: a};
};
var _simon_larsson$elm_template$Main$NotFound = {ctor: 'NotFound'};
var _simon_larsson$elm_template$Main$setRoute = F2(
	function (maybeRoute, model) {
		var transition = F2(
			function (toMsg, task) {
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: A2(_elm_lang$core$Task$attempt, toMsg, task)
				};
			});
		var _p1 = maybeRoute;
		if (_p1.ctor === 'Nothing') {
			return {
				ctor: '_Tuple2',
				_0: _elm_lang$core$Native_Utils.update(
					model,
					{state: _simon_larsson$elm_template$Main$NotFound}),
				_1: _elm_lang$core$Platform_Cmd$none
			};
		} else {
			switch (_p1._0.ctor) {
				case 'Root':
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								state: _simon_larsson$elm_template$Main$Home(_simon_larsson$elm_template$Scene_Home$init)
							}),
						_1: _simon_larsson$elm_template$Route$modifyUrl(_simon_larsson$elm_template$Route$Home)
					};
				case 'Home':
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								state: _simon_larsson$elm_template$Main$Home(_simon_larsson$elm_template$Scene_Home$init)
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
				default:
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{
								state: _simon_larsson$elm_template$Main$Lobby(_simon_larsson$elm_template$Scene_Lobby$init)
							}),
						_1: _elm_lang$core$Platform_Cmd$none
					};
			}
		}
	});
var _simon_larsson$elm_template$Main$Blank = {ctor: 'Blank'};
var _simon_larsson$elm_template$Main$initialState = _simon_larsson$elm_template$Main$Blank;
var _simon_larsson$elm_template$Main$init = F2(
	function (val, location) {
		return A2(
			_simon_larsson$elm_template$Main$setRoute,
			_simon_larsson$elm_template$Route$fromLocation(location),
			{
				session: {user: _elm_lang$core$Maybe$Nothing, lobby: _elm_lang$core$Maybe$Nothing},
				state: _simon_larsson$elm_template$Main$initialState
			});
	});
var _simon_larsson$elm_template$Main$HomeMsg = function (a) {
	return {ctor: 'HomeMsg', _0: a};
};
var _simon_larsson$elm_template$Main$updateState = F3(
	function (state, msg, model) {
		var _p2 = {ctor: '_Tuple2', _0: msg, _1: state};
		_v2_3:
		do {
			switch (_p2._0.ctor) {
				case 'SetRoute':
					return A2(_simon_larsson$elm_template$Main$setRoute, _p2._0._0, model);
				case 'HomeMsg':
					if (_p2._1.ctor === 'Home') {
						var _p3 = A2(_simon_larsson$elm_template$Scene_Home$update, _p2._0._0, _p2._1._0);
						var stateModel = _p3._0._0;
						var cmd = _p3._0._1;
						var msgFromPage = _p3._1;
						var newModel = function () {
							var _p4 = msgFromPage;
							if (_p4.ctor === 'NoOp') {
								return model;
							} else {
								return _elm_lang$core$Native_Utils.update(
									model,
									{
										session: _p4._0,
										state: _simon_larsson$elm_template$Main$Lobby(_simon_larsson$elm_template$Scene_Lobby$init)
									});
							}
						}();
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								newModel,
								{
									state: _simon_larsson$elm_template$Main$Home(stateModel)
								}),
							_1: A2(_elm_lang$core$Platform_Cmd$map, _simon_larsson$elm_template$Main$HomeMsg, cmd)
						};
					} else {
						break _v2_3;
					}
				default:
					if (_p2._1.ctor === 'Lobby') {
						return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
					} else {
						break _v2_3;
					}
			}
		} while(false);
		return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
	});
var _simon_larsson$elm_template$Main$update = F2(
	function (msg, model) {
		return A3(_simon_larsson$elm_template$Main$updateState, model.state, msg, model);
	});
var _simon_larsson$elm_template$Main$LobbyMsg = function (a) {
	return {ctor: 'LobbyMsg', _0: a};
};
var _simon_larsson$elm_template$Main$viewState = F2(
	function (session, state) {
		var _p5 = state;
		switch (_p5.ctor) {
			case 'Blank':
				return _elm_lang$html$Html$text('');
			case 'NotFound':
				return _elm_lang$html$Html$text('Not Found');
			case 'Lobby':
				return A2(
					_elm_lang$html$Html$map,
					_simon_larsson$elm_template$Main$LobbyMsg,
					A2(_simon_larsson$elm_template$Scene_Lobby$view, session, _p5._0));
			default:
				return A2(
					_elm_lang$html$Html$map,
					_simon_larsson$elm_template$Main$HomeMsg,
					A2(_simon_larsson$elm_template$Scene_Home$view, session, _p5._0));
		}
	});
var _simon_larsson$elm_template$Main$view = function (model) {
	return _simon_larsson$elm_template$Views_State$frame(
		A2(_simon_larsson$elm_template$Main$viewState, model.session, model.state));
};
var _simon_larsson$elm_template$Main$SetRoute = function (a) {
	return {ctor: 'SetRoute', _0: a};
};
var _simon_larsson$elm_template$Main$main = A2(
	_elm_lang$navigation$Navigation$programWithFlags,
	function (_p6) {
		return _simon_larsson$elm_template$Main$SetRoute(
			_simon_larsson$elm_template$Route$fromLocation(_p6));
	},
	{init: _simon_larsson$elm_template$Main$init, view: _simon_larsson$elm_template$Main$view, update: _simon_larsson$elm_template$Main$update, subscriptions: _simon_larsson$elm_template$Main$subscriptions})(_elm_lang$core$Json_Decode$value);
