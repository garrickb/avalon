var _garrickb$avalon$Route$routeToString = function (route) {
	var pieces = function () {
		var _p0 = route;
		switch (_p0.ctor) {
			case 'Home':
				return {ctor: '[]'};
			case 'Root':
				return {ctor: '[]'};
			default:
				return {
					ctor: '::',
					_0: 'lobby',
					_1: {ctor: '[]'}
				};
		}
	}();
	return A2(
		_elm_lang$core$Basics_ops['++'],
		'#/',
		A2(_elm_lang$core$String$join, '/', pieces));
};
var _garrickb$avalon$Route$href = function (route) {
	return _elm_lang$html$Html_Attributes$href(
		_garrickb$avalon$Route$routeToString(route));
};
var _garrickb$avalon$Route$modifyUrl = function (_p1) {
	return _elm_lang$navigation$Navigation$modifyUrl(
		_garrickb$avalon$Route$routeToString(_p1));
};
var _garrickb$avalon$Route$Lobby = {ctor: 'Lobby'};
var _garrickb$avalon$Route$Home = {ctor: 'Home'};
var _garrickb$avalon$Route$route = _evancz$url_parser$UrlParser$oneOf(
	{
		ctor: '::',
		_0: A2(
			_evancz$url_parser$UrlParser$map,
			_garrickb$avalon$Route$Home,
			_evancz$url_parser$UrlParser$s('')),
		_1: {
			ctor: '::',
			_0: A2(
				_evancz$url_parser$UrlParser$map,
				_garrickb$avalon$Route$Lobby,
				_evancz$url_parser$UrlParser$s('lobby')),
			_1: {ctor: '[]'}
		}
	});
var _garrickb$avalon$Route$Root = {ctor: 'Root'};
var _garrickb$avalon$Route$fromLocation = function (location) {
	return _elm_lang$core$String$isEmpty(location.hash) ? _elm_lang$core$Maybe$Just(_garrickb$avalon$Route$Root) : A2(_evancz$url_parser$UrlParser$parseHash, _garrickb$avalon$Route$route, location);
};
